@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigation
@inject IMostrarMensajes mostrarMensajes

@if (Pelicula == null)
{
    <text>Cargando...</text>
}
else
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="Editar" GenerosNoSeleccionados="GenerosNoSeleccionados" GenerosSeleccionados="GenerosSeleccionados" ActoresSeleccionados="ActoresSeleccionados" />
}


@code {
    [Parameter] public int PeliculaId { get; set; }
    private Pelicula Pelicula;
    private List<Genero> GenerosSeleccionados { get; set; } = new List<Genero>();
    private List<Genero> GenerosNoSeleccionados { get; set; } = new List<Genero>();
    private List<Persona> ActoresSeleccionados { get; set; } = new List<Persona>();

    protected async override Task OnInitializedAsync()
    {
        var response = await repositorio.Get<PeliculaActualizacionDto>($"api/peliculas/actualizar/{PeliculaId}");

        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigation.NavigateTo("peliculas");
            }
            else
            {
                await mostrarMensajes.MostrarMensajeError(await response.GetBody());
            }
        }
        else
        {
            var model = response.Response;
            ActoresSeleccionados = model.Actores;
            Pelicula = model.Pelicula;
            GenerosSeleccionados = model.GenerosSeleccionados;
            GenerosNoSeleccionados = model.GenerosNoSeleccionados;
        }
    }

    private async Task Editar()
    {
        var response = await repositorio.Put("api/peliculas", Pelicula);

        if (response.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await response.GetBody());
        }
        else
        {
            navigation.NavigateTo($"peliculas/{PeliculaId}");
        }
    }
}
