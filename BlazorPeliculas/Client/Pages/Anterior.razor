@page "/anterior"
@inject IRepositorio _repositorio
@inject IUnitOfWork _unitOfWork
@inject HttpClient Http
@using static BlazorPeliculas.Client.Shared.MainLayout;
@using System.Text.Json;

<AuthorizeView Roles="admin">
    <Authorized>
        Estas autorizado @context.User.Identity.Name
    </Authorized>
    <NotAuthorized>
        No estas autorizado
    </NotAuthorized>
</AuthorizeView>

<p style="font-size: @appState.Padding">Hola, @UtilidadesString.EnMayuscular(nombre)</p>

<button @onclick="@ManejarClick">Presionar</button>

<ListadoPeliculasAnterior ListaPeliculas="Peliculas" />

<div>
    <h2>Crear nueva Pelicula</h2>

    <CajaTexto placeholder="Nombre pelicula" disabled />

    <CajaTexto @attributes="EjemplosTexboxParametros" />
</div>

<button @onclick="AgregarPelicula">Agregar</button>

@code {
    string nombre = "Giancarlo";
    [CascadingParameter] protected AppState appState { get; set; }

    private Dictionary<string, object> EjemplosTexboxParametros = new Dictionary<string, object>
                  {
                                  {"placeholder", "nuevo placeholder" },
                                  {"disabled", "true" },
                              };

    private void ManejarClick()
    {
        Console.WriteLine("Me has hecho click");
    }

    private List<Pelicula> Peliculas;

    protected override async Task OnInitializedAsync()
    {
        Peliculas = _repositorio.ObtenerPeliculas();
        await LlamarOtraApi2();
    }

    void AgregarPelicula()
    {
        Peliculas.Add(new Pelicula { Titulo = "Nueva pelicula", Lanzamiento = DateTime.Now });
        foreach (var item in _unitOfWork.Prueba.ObtenerTexto())
        {
            Console.WriteLine(item);
        }
    }

    private async Task LlamarOtraApi()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("GET"),
            RequestUri = new Uri("https://jsonplaceholder.typicode.com/comments?postId=1")
        };
        var response = await Http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;

        var responseBody = await response.Content.ReadAsStringAsync();
        var responseJson = JsonSerializer.Deserialize<List<ResponseJson>>(responseBody);
        foreach (var item in responseJson)
        {
            Console.WriteLine($"{item.postId}-{item.id}-{item.name}-{item.email}");
        };
    }

    private async Task LlamarOtraApi2()
    {
        var response = await _repositorio.Get<List<ResponseJson>>($"{ unit2.UrlManager.GetUrlJsonPlaceholder}/comments?postId=1");
        var responseJson = response.Response;
        foreach (var item in responseJson)
        {
            Console.WriteLine($"{item.postId}-{item.id}-{item.name}-{item.email} F2");
        };
    }
}