@inject LazyAssemblyLoader lazyloader
@using System.Reflection

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true" 
        AdditionalAssemblies="assemblies" OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                Autorizando...
            </Authorizing>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <CustomNotFound />
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>

@code{
    private List<Assembly> assemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        if(context.Path.EndsWith("counter"))
        {
            var assembliesCargados = await lazyloader.LoadAssembliesAsync(
                new List<string> { "MathNet.Numerics.dll" });
            assemblies.AddRange(assembliesCargados);
        }
    }
}